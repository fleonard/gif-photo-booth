#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app'),
  http = require('http'),
  os = require('os'),
  pkg = require('../../package.json');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(app.locals.isDev ? pkg.config.DEV_PORT : 80);
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe  ${addr}` : `port ${addr.port}`;

  /* eslint no-console:0 */
  console.log(os.hostname());
  console.log(`Listening on ${bind}`, addr);

  if (app.locals.isDev) {
    /* eslint no-console:0 */
    console.log(`Use development urls of http://localhost:${port} or http://127.0.0.1:${port}`);
  }
}
